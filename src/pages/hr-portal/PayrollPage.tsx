import React, { useState, useEffect } from 'react';
import HRPortalLayout from '../../components/hr-portal/layout/HRPortalLayout';
import PayrollCalculator from '../../components/hr-portal/payroll/PayrollCalculator';
import PayslipGenerator from '../../components/hr-portal/payroll/PayslipGenerator';
import { Employee, Payroll } from '../../types/hr-portal';
import '../../styles/sui-overflow.css';

const PayrollPage: React.FC = () => {
  const [activeTab, setActiveTab] = useState<'current' | 'history'>('current');
  const [selectedPayrollId, setSelectedPayrollId] = useState<string | null>(null);
  const [employees, setEmployees] = useState<Partial<Employee>[]>([]);
  const [payrolls, setPayrolls] = useState<Payroll[]>([]);
  const [selectedEmployee, setSelectedEmployee] = useState<Partial<Employee> | undefined>(undefined);
  const [selectedPayroll, setSelectedPayroll] = useState<Payroll | null>(null);
  const [isLoading, setIsLoading] = useState(true);

  // Current pay period (would come from API in a real app)
  const currentPayPeriod = {
    startDate: '2024-07-01',
    endDate: '2024-07-15'
  };

  // Sample data - in a real app, this would come from API calls
  useEffect(() => {
    // Simulating API call with setTimeout
    setTimeout(() => {
      setEmployees(sampleEmployees);
      setPayrolls(samplePayrolls);
      setIsLoading(false);
    }, 500);
  }, []);

  // Handle payroll calculation from calculator component
  const handleCalculatePayroll = (employeeId: string, calculations: any) => {
    const employee = employees.find(emp => emp.id === employeeId);
    setSelectedEmployee(employee);
    
    // Create a new payroll object
    const newPayroll: Payroll = {
      id: `draft-${Date.now()}`, // Would be generated by backend in a real app
      employeeId,
      periodStart: calculations.periodStart,
      periodEnd: calculations.periodEnd,
      baseSalary: calculations.baseSalary,
      commissions: calculations.commissions,
      tips: calculations.tips,
      deductions: calculations.deductions,
      taxes: calculations.taxes,
      totalGross: calculations.totalGross,
      totalNet: calculations.totalNet,
      status: 'draft',
      createdAt: new Date().toISOString()
    };
    
    // Add to payrolls array (would be an API call in a real app)
    setPayrolls(prev => [newPayroll, ...prev]);
    setSelectedPayroll(newPayroll);
    setSelectedPayrollId(newPayroll.id);
  };

  // Handle process payroll button click from payslip component
  const handleProcessPayroll = (payrollId: string) => {
    // Update the payroll status (would be an API call in a real app)
    setPayrolls(prev => 
      prev.map(payroll => 
        payroll.id === payrollId 
          ? { 
              ...payroll, 
              status: 'processed', 
              processedAt: new Date().toISOString() 
            } 
          : payroll
      )
    );
    
    // Update the selected payroll if it's the one being processed
    if (selectedPayroll && selectedPayroll.id === payrollId) {
      setSelectedPayroll({
        ...selectedPayroll,
        status: 'processed',
        processedAt: new Date().toISOString()
      });
    }
  };

  // Handle payroll history item click
  const handlePayrollHistoryClick = (payrollId: string) => {
    const payroll = payrolls.find(p => p.id === payrollId);
    if (payroll) {
      setSelectedPayroll(payroll);
      setSelectedPayrollId(payrollId);
      const employee = employees.find(emp => emp.id === payroll.employeeId);
      setSelectedEmployee(employee);
    }
  };

  // Get totals for an employee's payrolls (for the summary cards)
  const getTotals = (employeeId: string) => {
    const employeePayrolls = payrolls.filter(
      p => p.employeeId === employeeId && p.status === 'processed'
    );
    
    return employeePayrolls.reduce(
      (acc, payroll) => {
        acc.grossTotal += payroll.totalGross;
        acc.netTotal += payroll.totalNet;
        acc.count += 1;
        return acc;
      },
      { grossTotal: 0, netTotal: 0, count: 0 }
    );
  };

  return (
    <HRPortalLayout activeTab="payroll">
      <div className="min-h-screen bg-gradient-to-br from-green-50 via-blue-50 to-purple-50">
        {/* Colorful Header */}
        <div className="sui-header green">
          <div className="container mx-auto px-6">
            <div className="sui-animate-in">
              <h1>ðŸ’° Payroll Management</h1>
              <p>Calculate and process employee payroll with ease</p>
            </div>
          </div>
        </div>

        <div className="container mx-auto px-6 pb-12">
          {/* Tabs */}
          <div className="sui-tabs">
            <button
              className={`sui-tab ${activeTab === 'current' ? 'active' : ''}`}
              onClick={() => setActiveTab('current')}
            >
              <svg className="w-4 h-4 mr-2" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M8 7V3m8 4V3m-9 8h10M5 21h14a2 2 0 002-2V7a2 2 0 00-2-2H5a2 2 0 00-2 2v12a2 2 0 002 2z" />
              </svg>
              Current Pay Period
            </button>
            <button
              className={`sui-tab ${activeTab === 'history' ? 'active' : ''}`}
              onClick={() => {
                setActiveTab('history');
                setSelectedPayroll(null);
                setSelectedPayrollId(null);
              }}
            >
              <svg className="w-4 h-4 mr-2" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M12 8v4l3 3m6-3a9 9 0 11-18 0 9 9 0 0118 0z" />
              </svg>
              Payroll History
            </button>
          </div>

          {/* Current Pay Period Tab */}
          {activeTab === 'current' && (
            <div className="sui-grid sui-grid-2">
              <div className="sui-card green sui-animate-in">
                <PayrollCalculator 
                  employees={employees} 
                  payrollPeriod={currentPayPeriod}
                  onCalculate={handleCalculatePayroll}
                />
              </div>
              
              {selectedPayroll ? (
                <div className="sui-card orange sui-animate-in" style={{ animationDelay: '0.2s' }}>
                  <PayslipGenerator 
                    payroll={selectedPayroll}
                    employee={selectedEmployee}
                    onProcess={handleProcessPayroll}
                  />
                </div>
              ) : (
                <div className="sui-card sui-animate-in" style={{ animationDelay: '0.2s' }}>
                  <div className="flex flex-col items-center justify-center h-full py-16">
                    <div className="sui-icon-3d mb-6">
                      <svg className="w-8 h-8" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                        <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={1.5} d="M9 17v-2m3 2v-4m3 4v-6m2 10H7a2 2 0 01-2-2V5a2 2 0 012-2h5.586a1 1 0 01.707.293l5.414 5.414a1 1 0 01.293.707V19a2 2 0 01-2 2z" />
                      </svg>
                    </div>
                    <h3 className="text-xl font-bold text-gray-700 mb-2">No Payslip Generated Yet</h3>
                    <p className="text-gray-500 text-center max-w-sm">Select an employee and calculate their payroll to generate a professional payslip.</p>
                  </div>
                </div>
              )}
            </div>
          )}

          {/* Payroll History Tab */}
          {activeTab === 'history' && (
            <div className="space-y-8">
              {/* Top Summary Cards */}
              <div className="sui-grid sui-grid-3">
                {/* Total Processed */}
                <div className="sui-stat-card sui-animate-in">
                  <div className="sui-stat-icon green">
                    <svg className="w-6 h-6 text-white" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                      <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M9 12l2 2 4-4m6 2a9 9 0 11-18 0 9 9 0 0118 0z" />
                    </svg>
                  </div>
                  <div className="sui-stat-value">
                    {payrolls.filter(p => p.status === 'processed').length}
                  </div>
                  <div className="sui-stat-label">Processed Payrolls</div>
                  <div className="mt-2 text-xs text-gray-500">
                    Last: {payrolls.filter(p => p.status === 'processed').length > 0 
                      ? new Date(payrolls.filter(p => p.status === 'processed')[0].createdAt).toLocaleDateString() 
                      : 'None'}
                  </div>
                </div>
                
                {/* Total Gross */}
                <div className="sui-stat-card sui-animate-in" style={{ animationDelay: '0.1s' }}>
                  <div className="sui-stat-icon orange">
                    <svg className="w-6 h-6 text-white" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                      <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M12 8c-1.657 0-3 .895-3 2s1.343 2 3 2 3 .895 3 2-1.343 2-3 2m0-8c1.11 0 2.08.402 2.599 1M12 8V7m0 1v8m0 0v1m0-1c-1.11 0-2.08-.402-2.599-1M21 12a9 9 0 11-18 0 9 9 0 0118 0z" />
                    </svg>
                  </div>
                  <div className="sui-stat-value">
                    {new Intl.NumberFormat('en-US', {
                      style: 'currency',
                      currency: 'USD',
                      maximumFractionDigits: 0
                    }).format(payrolls.filter(p => p.status === 'processed').reduce((sum, p) => sum + p.totalGross, 0))}
                  </div>
                  <div className="sui-stat-label">Total Gross</div>
                  <div className="mt-2 text-xs text-gray-500">
                    Across {payrolls.filter(p => p.status === 'processed').length} payrolls
                  </div>
                </div>
                
                {/* Total Net */}
                <div className="sui-stat-card sui-animate-in" style={{ animationDelay: '0.2s' }}>
                  <div className="sui-stat-icon pink">
                    <svg className="w-6 h-6 text-white" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                      <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M17 9V7a2 2 0 00-2-2H5a2 2 0 00-2 2v6a2 2 0 002 2h2m2 4h10a2 2 0 002-2v-6a2 2 0 00-2-2H9a2 2 0 00-2 2v6a2 2 0 002 2z" />
                    </svg>
                  </div>
                  <div className="sui-stat-value">
                    {new Intl.NumberFormat('en-US', {
                      style: 'currency',
                      currency: 'USD',
                      maximumFractionDigits: 0
                    }).format(payrolls.filter(p => p.status === 'processed').reduce((sum, p) => sum + p.totalNet, 0))}
                  </div>
                  <div className="sui-stat-label">Total Net</div>
                  <div className="mt-2 text-xs text-gray-500">
                    After taxes and deductions
                  </div>
                </div>
              </div>

              {/* Payroll History Grid */}
              <div className="sui-grid sui-grid-3">
                {/* Payroll History List */}
                <div className="sui-card sui-animate-in" style={{ animationDelay: '0.3s' }}>
                  <div className="flex items-center gap-3 mb-6">
                    <span className="sui-icon-3d">
                      <svg className="w-5 h-5" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                        <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M9 5H7a2 2 0 00-2 2v10a2 2 0 002 2h8a2 2 0 002-2V7a2 2 0 00-2-2h-2M9 5a2 2 0 002 2h2a2 2 0 002-2M9 5a2 2 0 012-2h2a2 2 0 012 2" />
                      </svg>
                    </span>
                    <h2 className="text-xl font-bold text-gray-900">Payroll History</h2>
                  </div>
                  
                  {isLoading ? (
                    <div className="flex justify-center py-8">
                      <div className="sui-loading">
                        <div></div>
                        <div></div>
                      </div>
                    </div>
                  ) : payrolls.length > 0 ? (
                    <div className="space-y-3 max-h-96 overflow-y-auto">
                      {payrolls.map((payroll) => {
                        const employee = employees.find(e => e.id === payroll.employeeId);
                        const isSelected = selectedPayrollId === payroll.id;
                        
                        return (
                          <div 
                            key={payroll.id}
                            className={`p-4 rounded-xl border-2 cursor-pointer transition-all duration-200 ${
                              isSelected 
                                ? 'border-purple-300 bg-purple-50 shadow-md' 
                                : 'border-gray-200 hover:border-purple-200 hover:bg-purple-25'
                            }`}
                            onClick={() => handlePayrollHistoryClick(payroll.id)}
                          >
                            <div className="flex justify-between items-start mb-2">
                              <span className="font-semibold text-gray-900">
                                {employee ? `${employee.firstName} ${employee.lastName}` : 'Unknown Employee'}
                              </span>
                              <span 
                                className={`inline-flex items-center px-2 py-1 rounded-full text-xs font-semibold ${
                                  payroll.status === 'processed' 
                                    ? 'bg-green-100 text-green-700'
                                    : payroll.status === 'draft' 
                                    ? 'bg-yellow-100 text-yellow-700'
                                    : 'bg-red-100 text-red-700'
                                }`}
                              >
                                {payroll.status.charAt(0).toUpperCase() + payroll.status.slice(1)}
                              </span>
                            </div>
                            <div className="text-sm text-gray-600 mb-2">
                              ðŸ“… {new Date(payroll.periodStart).toLocaleDateString()} - {new Date(payroll.periodEnd).toLocaleDateString()}
                            </div>
                            <div className="flex justify-between items-center">
                              <span className="text-xs text-gray-500">
                                {new Date(payroll.createdAt).toLocaleDateString()}
                              </span>
                              <span className="text-sm font-bold text-green-600">
                                {new Intl.NumberFormat('en-US', {
                                  style: 'currency',
                                  currency: 'USD'
                                }).format(payroll.totalNet)}
                              </span>
                            </div>
                          </div>
                        );
                      })}
                    </div>
                  ) : (
                    <div className="text-center py-8 text-gray-500">
                      <div className="sui-icon-3d mb-4 mx-auto">
                        <svg className="w-6 h-6" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                          <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M9 12h6m-6 4h6m2 5H7a2 2 0 01-2-2V5a2 2 0 012-2h5.586a1 1 0 01.707.293l5.414 5.414a1 1 0 01.293.707V19a2 2 0 01-2 2z" />
                        </svg>
                      </div>
                      <p>No payroll history available</p>
                    </div>
                  )}
                </div>

                {/* Selected Payroll Details */}
                {selectedPayroll ? (
                  <div className="lg:col-span-2">
                    <div className="sui-card pink sui-animate-in" style={{ animationDelay: '0.4s' }}>
                      <PayslipGenerator 
                        payroll={selectedPayroll}
                        employee={selectedEmployee}
                        onProcess={handleProcessPayroll}
                      />
                    </div>
                  </div>
                ) : (
                  <div className="lg:col-span-2">
                    <div className="sui-card sui-animate-in" style={{ animationDelay: '0.4s' }}>
                      <div className="flex flex-col items-center justify-center h-full py-16">
                        <div className="sui-icon-3d mb-6">
                          <svg className="w-8 h-8" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                            <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M15 12a3 3 0 11-6 0 3 3 0 016 0z" />
                            <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M2.458 12C3.732 7.943 7.523 5 12 5c4.478 0 8.268 2.943 9.542 7-1.274 4.057-5.064 7-9.542 7-4.477 0-8.268-2.943-9.542-7z" />
                          </svg>
                        </div>
                        <h3 className="text-xl font-bold text-gray-700 mb-2">Select a Payroll</h3>
                        <p className="text-gray-500 text-center max-w-sm">Choose a payroll from the history list to view detailed information and payslip.</p>
                      </div>
                    </div>
                  </div>
                )}
              </div>
            </div>
          )}
        </div>
      </div>
    </HRPortalLayout>
  );
};

// Sample data for development/demo purposes
const sampleEmployees: Partial<Employee>[] = [
  {
    id: '1',
    firstName: 'Sarah',
    lastName: 'Johnson',
    position: 'Senior Stylist',
    baseSalary: 3500,
    commissionRate: 0.15
  },
  {
    id: '2',
    firstName: 'Mike',
    lastName: 'Chen',
    position: 'Barber',
    baseSalary: 3200,
    commissionRate: 0.12
  },
  {
    id: '3',
    firstName: 'Emma',
    lastName: 'Davis',
    position: 'Nail Technician',
    baseSalary: 2800,
    commissionRate: 0.20
  }
];

const samplePayrolls: Payroll[] = [
  {
    id: '1',
    employeeId: '1',
    periodStart: '2024-06-16',
    periodEnd: '2024-06-30',
    baseSalary: 3500,
    commissions: 875,
    tips: 240,
    deductions: 350,
    taxes: 920,
    totalGross: 4615,
    totalNet: 3345,
    status: 'processed',
    createdAt: '2024-07-01T10:00:00Z',
    processedAt: '2024-07-01T14:30:00Z'
  },
  {
    id: '2',
    employeeId: '2',
    periodStart: '2024-06-16',
    periodEnd: '2024-06-30',
    baseSalary: 3200,
    commissions: 480,
    tips: 180,
    deductions: 320,
    taxes: 730,
    totalGross: 3860,
    totalNet: 2810,
    status: 'processed',
    createdAt: '2024-07-01T10:15:00Z',
    processedAt: '2024-07-01T14:45:00Z'
  }
];

export default PayrollPage; 