import React, { useState, useEffect } from 'react';
import HRPortalLayout from '../../components/hr-portal/layout/HRPortalLayout';
import { Employee, TrainingModule, TrainingAssignment } from '../../types/hr-portal';

const TrainingPage: React.FC = () => {
  const [activeTab, setActiveTab] = useState<'modules' | 'assignments'>('modules');
  const [employees, setEmployees] = useState<Partial<Employee>[]>([]);
  const [modules, setModules] = useState<TrainingModule[]>([]);
  const [assignments, setAssignments] = useState<TrainingAssignment[]>([]);
  const [isLoading, setIsLoading] = useState(true);
  const [selectedModule, setSelectedModule] = useState<TrainingModule | null>(null);
  const [assignModalOpen, setAssignModalOpen] = useState(false);
  const [selectedEmployeeIds, setSelectedEmployeeIds] = useState<string[]>([]);
  const [dueDate, setDueDate] = useState('');

  // Sample data - in a real app, this would come from API calls
  useEffect(() => {
    // Simulating API call with setTimeout
    setTimeout(() => {
      setEmployees(sampleEmployees);
      setModules(sampleTrainingModules);
      setAssignments(sampleTrainingAssignments);
      setIsLoading(false);
    }, 500);
  }, []);

  // Handle assigning a training module to employees
  const handleAssignModule = () => {
    if (selectedModule && selectedEmployeeIds.length > 0 && dueDate) {
      const newAssignments = selectedEmployeeIds.map(employeeId => {
        return {
          id: `new-${Date.now()}-${employeeId}`, // Would be generated by backend in a real app
          employeeId,
          moduleId: selectedModule.id,
          assignedDate: new Date().toISOString(),
          dueDate,
          status: 'assigned' as const
        };
      });
      
      setAssignments(prev => [...newAssignments, ...prev]);
      setAssignModalOpen(false);
      setSelectedEmployeeIds([]);
      setDueDate('');
    }
  };

  // Handle completing a training assignment
  const handleCompleteAssignment = (assignmentId: string, score?: number) => {
    setAssignments(prev => 
      prev.map(assignment => 
        assignment.id === assignmentId 
          ? { 
              ...assignment, 
              status: 'completed', 
              completedDate: new Date().toISOString(),
              score: score || undefined
            } 
          : assignment
      )
    );
  };

  // Handle opening the assign modal for a specific module
  const handleOpenAssignModal = (module: TrainingModule) => {
    setSelectedModule(module);
    setAssignModalOpen(true);
  };

  // Helper to get status color class
  const getStatusColorClass = (status: string) => {
    switch (status) {
      case 'assigned':
        return 'bg-blue-100 text-blue-800';
      case 'in_progress':
        return 'bg-yellow-100 text-yellow-800';
      case 'completed':
        return 'bg-green-100 text-green-800';
      case 'expired':
        return 'bg-red-100 text-red-800';
      default:
        return 'bg-gray-100 text-gray-800';
    }
  };

  // Helper to get employee name
  const getEmployeeName = (employeeId: string) => {
    const employee = employees.find(e => e.id === employeeId);
    return employee ? `${employee.firstName} ${employee.lastName}` : 'Unknown Employee';
  };

  // Helper to get module name
  const getModuleName = (moduleId: string) => {
    const module = modules.find(m => m.id === moduleId);
    return module ? module.title : 'Unknown Module';
  };

  return (
    <HRPortalLayout activeTab="training">
      <div className="py-6 px-6">
        <h1 className="text-3xl font-bold mb-2 text-gray-900">Training Management</h1>
        <p className="text-gray-600 mb-8">Manage employee training modules, track progress, and ensure compliance</p>

        {/* Tabs */}
        <div className="mb-6">
          <div className="border-b border-gray-200">
            <nav className="-mb-px flex space-x-8">
              <button
                className={`py-4 px-1 border-b-2 font-medium text-sm ${
                  activeTab === 'modules'
                    ? 'border-primary text-primary'
                    : 'border-transparent text-gray-500 hover:text-gray-700 hover:border-gray-300'
                }`}
                onClick={() => setActiveTab('modules')}
              >
                Training Modules
              </button>
              <button
                className={`py-4 px-1 border-b-2 font-medium text-sm ${
                  activeTab === 'assignments'
                    ? 'border-primary text-primary'
                    : 'border-transparent text-gray-500 hover:text-gray-700 hover:border-gray-300'
                }`}
                onClick={() => setActiveTab('assignments')}
              >
                Employee Assignments
              </button>
            </nav>
          </div>
        </div>

        {/* Main Content */}
        {isLoading ? (
          <div className="flex justify-center items-center h-64">
            <div className="animate-spin rounded-full h-12 w-12 border-t-2 border-b-2 border-primary"></div>
          </div>
        ) : activeTab === 'modules' ? (
          /* Training Modules Tab */
          <div className="bg-white rounded-xl border border-gray-200 shadow-sm overflow-hidden">
            <div className="border-b border-gray-200 bg-gray-50 px-6 py-4 flex justify-between items-center">
              <h2 className="text-lg font-semibold text-gray-900">Training Modules</h2>
              <button 
                className="bg-primary hover:bg-primary-dark text-black font-medium py-2 px-4 rounded-md transition-colors duration-200"
              >
                Create New Module
              </button>
            </div>
            
            <div className="overflow-x-auto">
              <table className="min-w-full divide-y divide-gray-200">
                <thead>
                  <tr className="bg-gray-50">
                    <th scope="col" className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                      Module
                    </th>
                    <th scope="col" className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                      Type
                    </th>
                    <th scope="col" className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                      Duration
                    </th>
                    <th scope="col" className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                      Required For
                    </th>
                    <th scope="col" className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                      Compliance
                    </th>
                    <th scope="col" className="relative px-6 py-3">
                      <span className="sr-only">Actions</span>
                    </th>
                  </tr>
                </thead>
                <tbody className="bg-white divide-y divide-gray-200">
                  {modules.map((module) => (
                    <tr key={module.id} className="hover:bg-gray-50">
                      <td className="px-6 py-4 whitespace-nowrap">
                        <div className="flex items-center">
                          <div className="flex-shrink-0 h-10 w-10 bg-primary/10 rounded-md flex items-center justify-center">
                            <svg xmlns="http://www.w3.org/2000/svg" className="h-6 w-6 text-primary" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                              {module.type === 'video' ? (
                                <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M14.752 11.168l-3.197-2.132A1 1 0 0010 9.87v4.263a1 1 0 001.555.832l3.197-2.132a1 1 0 000-1.664z" />
                              ) : module.type === 'document' ? (
                                <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M9 12h6m-6 4h6m2 5H7a2 2 0 01-2-2V5a2 2 0 012-2h5.586a1 1 0 01.707.293l5.414 5.414a1 1 0 01.293.707V19a2 2 0 01-2 2z" />
                              ) : module.type === 'quiz' ? (
                                <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M9 5H7a2 2 0 00-2 2v12a2 2 0 002 2h10a2 2 0 002-2V7a2 2 0 00-2-2h-2M9 5a2 2 0 002 2h2a2 2 0 002-2M9 5a2 2 0 012-2h2a2 2 0 012 2" />
                              ) : (
                                <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M12 6.253v13m0-13C10.832 5.477 9.246 5 7.5 5S4.168 5.477 3 6.253v13C4.168 18.477 5.754 18 7.5 18s3.332.477 4.5 1.253m0-13C13.168 5.477 14.754 5 16.5 5c1.747 0 3.332.477 4.5 1.253v13C19.832 18.477 18.247 18 16.5 18c-1.746 0-3.332.477-4.5 1.253" />
                              )}
                            </svg>
                          </div>
                          <div className="ml-4">
                            <div className="text-sm font-medium text-gray-900">{module.title}</div>
                            <div className="text-sm text-gray-500 line-clamp-1">{module.description}</div>
                          </div>
                        </div>
                      </td>
                      <td className="px-6 py-4 whitespace-nowrap">
                        <span className="inline-flex items-center px-2.5 py-0.5 rounded-full text-xs font-medium bg-gray-100 text-gray-800 capitalize">
                          {module.type.replace('_', ' ')}
                        </span>
                      </td>
                      <td className="px-6 py-4 whitespace-nowrap text-sm text-gray-500">
                        {module.duration} min
                      </td>
                      <td className="px-6 py-4 whitespace-nowrap">
                        <div className="flex flex-wrap gap-1">
                          {module.requiredFor.slice(0, 2).map((role, index) => (
                            <span key={index} className="inline-flex items-center px-2 py-0.5 rounded text-xs font-medium bg-blue-100 text-blue-800">
                              {role}
                            </span>
                          ))}
                          {module.requiredFor.length > 2 && (
                            <span className="inline-flex items-center px-2 py-0.5 rounded text-xs font-medium bg-blue-100 text-blue-800">
                              +{module.requiredFor.length - 2} more
                            </span>
                          )}
                        </div>
                      </td>
                      <td className="px-6 py-4 whitespace-nowrap">
                        {module.complianceRequirement ? (
                          <span className="inline-flex items-center px-2.5 py-0.5 rounded-full text-xs font-medium bg-red-100 text-red-800">
                            Required
                          </span>
                        ) : (
                          <span className="inline-flex items-center px-2.5 py-0.5 rounded-full text-xs font-medium bg-gray-100 text-gray-800">
                            Optional
                          </span>
                        )}
                      </td>
                      <td className="px-6 py-4 whitespace-nowrap text-right text-sm font-medium">
                        <button
                          onClick={() => handleOpenAssignModal(module)}
                          className="text-primary hover:text-primary-dark"
                        >
                          Assign
                        </button>
                      </td>
                    </tr>
                  ))}
                </tbody>
              </table>
            </div>
          </div>
        ) : (
          /* Employee Assignments Tab */
          <div className="bg-white rounded-xl border border-gray-200 shadow-sm overflow-hidden">
            <div className="border-b border-gray-200 bg-gray-50 px-6 py-4">
              <h2 className="text-lg font-semibold text-gray-900">Training Assignments</h2>
            </div>
            
            <div className="overflow-x-auto">
              <table className="min-w-full divide-y divide-gray-200">
                <thead>
                  <tr className="bg-gray-50">
                    <th scope="col" className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                      Employee
                    </th>
                    <th scope="col" className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                      Module
                    </th>
                    <th scope="col" className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                      Assigned Date
                    </th>
                    <th scope="col" className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                      Due Date
                    </th>
                    <th scope="col" className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                      Status
                    </th>
                    <th scope="col" className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                      Score
                    </th>
                    <th scope="col" className="relative px-6 py-3">
                      <span className="sr-only">Actions</span>
                    </th>
                  </tr>
                </thead>
                <tbody className="bg-white divide-y divide-gray-200">
                  {assignments.map((assignment) => {
                    const employee = employees.find(e => e.id === assignment.employeeId);
                    const module = modules.find(m => m.id === assignment.moduleId);
                    const isPending = assignment.status === 'assigned' || assignment.status === 'in_progress';
                    const isOverdue = isPending && new Date(assignment.dueDate) < new Date();
                    
                    return (
                      <tr key={assignment.id} className="hover:bg-gray-50">
                        <td className="px-6 py-4 whitespace-nowrap">
                          <div className="flex items-center">
                            <div className="flex-shrink-0 h-8 w-8">
                              <div className="h-8 w-8 rounded-full bg-primary/10 flex items-center justify-center">
                                <span className="text-primary font-medium text-xs">
                                  {employee?.firstName?.[0]}{employee?.lastName?.[0]}
                                </span>
                              </div>
                            </div>
                            <div className="ml-3">
                              <div className="text-sm font-medium text-gray-900">
                                {getEmployeeName(assignment.employeeId)}
                              </div>
                              <div className="text-xs text-gray-500">{employee?.role}</div>
                            </div>
                          </div>
                        </td>
                        <td className="px-6 py-4 whitespace-nowrap">
                          <div className="text-sm text-gray-900">{getModuleName(assignment.moduleId)}</div>
                          <div className="text-xs text-gray-500 capitalize">{module?.type.replace('_', ' ')}</div>
                        </td>
                        <td className="px-6 py-4 whitespace-nowrap text-sm text-gray-500">
                          {new Date(assignment.assignedDate).toLocaleDateString()}
                        </td>
                        <td className="px-6 py-4 whitespace-nowrap text-sm text-gray-500">
                          <span className={isOverdue ? 'text-red-600 font-medium' : ''}>
                            {new Date(assignment.dueDate).toLocaleDateString()}
                          </span>
                        </td>
                        <td className="px-6 py-4 whitespace-nowrap">
                          <span className={`inline-flex items-center px-2.5 py-0.5 rounded-full text-xs font-medium ${getStatusColorClass(assignment.status)}`}>
                            {assignment.status === 'in_progress' 
                              ? 'In Progress' 
                              : assignment.status.charAt(0).toUpperCase() + assignment.status.slice(1)}
                          </span>
                        </td>
                        <td className="px-6 py-4 whitespace-nowrap text-sm text-gray-500">
                          {assignment.score !== undefined 
                            ? `${assignment.score}%` 
                            : assignment.status === 'completed' 
                              ? 'Completed' 
                              : '-'}
                        </td>
                        <td className="px-6 py-4 whitespace-nowrap text-right text-sm font-medium">
                          {isPending && (
                            <button
                              onClick={() => handleCompleteAssignment(assignment.id, module?.type === 'quiz' ? Math.floor(Math.random() * 31) + 70 : undefined)}
                              className="text-primary hover:text-primary-dark"
                            >
                              Mark Complete
                            </button>
                          )}
                        </td>
                      </tr>
                    );
                  })}
                </tbody>
              </table>
            </div>
          </div>
        )}
      </div>

      {/* Assign Module Modal */}
      {assignModalOpen && selectedModule && (
        <div className="fixed inset-0 z-50 overflow-y-auto">
          <div className="flex items-center justify-center min-h-screen px-4 pt-4 pb-20 text-center">
            <div className="fixed inset-0 transition-opacity" onClick={() => setAssignModalOpen(false)}>
              <div className="absolute inset-0 bg-gray-500 opacity-75"></div>
            </div>
            
            <div className="inline-block align-bottom bg-white rounded-lg text-left overflow-hidden shadow-xl transform transition-all sm:my-8 sm:align-middle sm:max-w-lg sm:w-full">
              <div className="bg-white px-4 pt-5 pb-4 sm:p-6 sm:pb-4">
                <h3 className="text-lg leading-6 font-medium text-gray-900 mb-4">
                  Assign Training: {selectedModule.title}
                </h3>
                
                <div className="space-y-4">
                  <div>
                    <label htmlFor="employees" className="block text-sm font-medium text-gray-700 mb-1">
                      Select Employees
                    </label>
                    <select
                      id="employees"
                      multiple
                      className="mt-1 block w-full rounded-md border border-gray-300 py-2 pl-3 pr-10 focus:border-primary focus:ring focus:ring-primary focus:ring-opacity-50"
                      value={selectedEmployeeIds}
                      onChange={(e) => {
                        const options = Array.from(e.target.selectedOptions);
                        setSelectedEmployeeIds(options.map(option => option.value));
                      }}
                      size={5}
                    >
                      {employees
                        .filter(emp => emp.status === 'active')
                        .map((employee) => (
                          <option key={employee.id} value={employee.id}>
                            {employee.firstName} {employee.lastName} - {employee.role}
                          </option>
                        ))}
                    </select>
                    <p className="mt-1 text-xs text-gray-500">Hold Ctrl/Cmd to select multiple employees</p>
                  </div>
                  
                  <div>
                    <label htmlFor="dueDate" className="block text-sm font-medium text-gray-700 mb-1">
                      Due Date
                    </label>
                    <input
                      type="date"
                      id="dueDate"
                      className="mt-1 block w-full rounded-md border border-gray-300 py-2 px-3 focus:border-primary focus:ring focus:ring-primary focus:ring-opacity-50"
                      value={dueDate}
                      onChange={(e) => setDueDate(e.target.value)}
                    />
                  </div>
                </div>
              </div>
              
              <div className="bg-gray-50 px-4 py-3 sm:px-6 sm:flex sm:flex-row-reverse">
                <button
                  type="button"
                  className="w-full inline-flex justify-center rounded-md border border-transparent shadow-sm px-4 py-2 bg-primary text-black font-medium hover:bg-primary-dark focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-primary sm:ml-3 sm:w-auto sm:text-sm"
                  onClick={handleAssignModule}
                  disabled={selectedEmployeeIds.length === 0 || !dueDate}
                >
                  Assign
                </button>
                <button
                  type="button"
                  className="mt-3 w-full inline-flex justify-center rounded-md border border-gray-300 shadow-sm px-4 py-2 bg-white text-gray-700 font-medium hover:bg-gray-50 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-primary sm:mt-0 sm:ml-3 sm:w-auto sm:text-sm"
                  onClick={() => setAssignModalOpen(false)}
                >
                  Cancel
                </button>
              </div>
            </div>
          </div>
        </div>
      )}
    </HRPortalLayout>
  );
};

export default TrainingPage;

// Sample data for demo
const sampleEmployees: Partial<Employee>[] = [
  {
    id: '101',
    firstName: 'Sophie',
    lastName: 'Taylor',
    role: 'Senior Stylist',
    department: 'Hair',
    status: 'active'
  },
  {
    id: '102',
    firstName: 'Alex',
    lastName: 'Rodriguez',
    role: 'Salon Manager',
    department: 'Management',
    status: 'active'
  },
  {
    id: '103',
    firstName: 'Emma',
    lastName: 'Johnson',
    role: 'Junior Stylist',
    department: 'Hair',
    status: 'active'
  },
  {
    id: '104',
    firstName: 'David',
    lastName: 'Miller',
    role: 'Barber',
    department: 'Hair',
    status: 'active'
  },
  {
    id: '105',
    firstName: 'Amanda',
    lastName: 'Chen',
    role: 'Esthetician',
    department: 'Skin Care',
    status: 'on_leave'
  }
];

const sampleTrainingModules: TrainingModule[] = [
  {
    id: '1',
    title: 'Salon Safety Procedures',
    description: 'Essential safety protocols and procedures for salon operations',
    type: 'document',
    requiredFor: ['All Staff'],
    content: 'https://example.com/safety-procedures',
    duration: 45,
    complianceRequirement: true
  },
  {
    id: '2',
    title: 'Advanced Hair Coloring Techniques',
    description: 'Modern hair coloring methods and application techniques',
    type: 'video',
    requiredFor: ['Senior Stylist', 'Junior Stylist', 'Colorist'],
    content: 'https://example.com/hair-coloring-video',
    duration: 60,
    complianceRequirement: false
  },
  {
    id: '3',
    title: 'Customer Service Excellence',
    description: 'Best practices for providing exceptional customer service in a salon environment',
    type: 'quiz',
    requiredFor: ['All Staff'],
    content: 'https://example.com/customer-service-quiz',
    duration: 30,
    complianceRequirement: true
  },
  {
    id: '4',
    title: 'Salon Sanitation Standards',
    description: 'Proper sanitation and hygiene practices for salon tools and equipment',
    type: 'document',
    requiredFor: ['All Staff'],
    content: 'https://example.com/sanitation-standards',
    duration: 25,
    complianceRequirement: true
  },
  {
    id: '5',
    title: 'Product Knowledge Training',
    description: 'Comprehensive overview of salon product lines and their applications',
    type: 'hands_on',
    requiredFor: ['Senior Stylist', 'Junior Stylist', 'Esthetician'],
    content: 'https://example.com/product-training',
    duration: 90,
    complianceRequirement: false
  }
];

const sampleTrainingAssignments: TrainingAssignment[] = [
  {
    id: '1',
    employeeId: '101',
    moduleId: '1',
    assignedDate: '2024-06-01',
    dueDate: '2024-06-15',
    completedDate: '2024-06-10',
    status: 'completed'
  },
  {
    id: '2',
    employeeId: '103',
    moduleId: '2',
    assignedDate: '2024-06-15',
    dueDate: '2024-07-15',
    status: 'in_progress'
  },
  {
    id: '3',
    employeeId: '104',
    moduleId: '1',
    assignedDate: '2024-06-01',
    dueDate: '2024-06-15',
    completedDate: '2024-06-12',
    status: 'completed'
  },
  {
    id: '4',
    employeeId: '102',
    moduleId: '3',
    assignedDate: '2024-06-10',
    dueDate: '2024-06-30',
    status: 'assigned'
  },
  {
    id: '5',
    employeeId: '101',
    moduleId: '2',
    assignedDate: '2024-06-15',
    dueDate: '2024-07-15',
    status: 'in_progress'
  },
  {
    id: '6',
    employeeId: '105',
    moduleId: '4',
    assignedDate: '2024-05-15',
    dueDate: '2024-06-01',
    status: 'expired'
  },
  {
    id: '7',
    employeeId: '103',
    moduleId: '3',
    assignedDate: '2024-06-10',
    dueDate: '2024-06-30',
    completedDate: '2024-06-25',
    score: 92,
    status: 'completed'
  },
]; 