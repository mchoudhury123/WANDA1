import React, { useState, useEffect } from 'react';
import HRPortalLayout from '../../components/hr-portal/layout/HRPortalLayout';
import PayrollCalculator from '../../components/hr-portal/payroll/PayrollCalculator';
import PayslipGenerator from '../../components/hr-portal/payroll/PayslipGenerator';
import { Employee, Payroll } from '../../types/hr-portal';

const PayrollPage: React.FC = () => {
  const [activeTab, setActiveTab] = useState<'current' | 'history'>('current');
  const [selectedPayrollId, setSelectedPayrollId] = useState<string | null>(null);
  const [employees, setEmployees] = useState<Partial<Employee>[]>([]);
  const [payrolls, setPayrolls] = useState<Payroll[]>([]);
  const [selectedEmployee, setSelectedEmployee] = useState<Partial<Employee> | undefined>(undefined);
  const [selectedPayroll, setSelectedPayroll] = useState<Payroll | null>(null);
  const [isLoading, setIsLoading] = useState(true);

  // Current pay period (would come from API in a real app)
  const currentPayPeriod = {
    startDate: '2024-07-01',
    endDate: '2024-07-15'
  };

  // Sample data - in a real app, this would come from API calls
  useEffect(() => {
    // Simulating API call with setTimeout
    setTimeout(() => {
      setEmployees(sampleEmployees);
      setPayrolls(samplePayrolls);
      setIsLoading(false);
    }, 500);
  }, []);

  // Handle payroll calculation from calculator component
  const handleCalculatePayroll = (employeeId: string, calculations: any) => {
    const employee = employees.find(emp => emp.id === employeeId);
    setSelectedEmployee(employee);
    
    // Create a new payroll object
    const newPayroll: Payroll = {
      id: `draft-${Date.now()}`, // Would be generated by backend in a real app
      employeeId,
      periodStart: calculations.periodStart,
      periodEnd: calculations.periodEnd,
      baseSalary: calculations.baseSalary,
      commissions: calculations.commissions,
      tips: calculations.tips,
      deductions: calculations.deductions,
      taxes: calculations.taxes,
      totalGross: calculations.totalGross,
      totalNet: calculations.totalNet,
      status: 'draft',
      createdAt: new Date().toISOString()
    };
    
    // Add to payrolls array (would be an API call in a real app)
    setPayrolls(prev => [newPayroll, ...prev]);
    setSelectedPayroll(newPayroll);
    setSelectedPayrollId(newPayroll.id);
  };

  // Handle process payroll button click from payslip component
  const handleProcessPayroll = (payrollId: string) => {
    // Update the payroll status (would be an API call in a real app)
    setPayrolls(prev => 
      prev.map(payroll => 
        payroll.id === payrollId 
          ? { 
              ...payroll, 
              status: 'processed', 
              processedAt: new Date().toISOString() 
            } 
          : payroll
      )
    );
    
    // Update the selected payroll if it's the one being processed
    if (selectedPayroll && selectedPayroll.id === payrollId) {
      setSelectedPayroll({
        ...selectedPayroll,
        status: 'processed',
        processedAt: new Date().toISOString()
      });
    }
  };

  // Handle payroll history item click
  const handlePayrollHistoryClick = (payrollId: string) => {
    const payroll = payrolls.find(p => p.id === payrollId);
    if (payroll) {
      setSelectedPayroll(payroll);
      setSelectedPayrollId(payrollId);
      const employee = employees.find(emp => emp.id === payroll.employeeId);
      setSelectedEmployee(employee);
    }
  };

  // Get totals for an employee's payrolls (for the summary cards)
  const getTotals = (employeeId: string) => {
    const employeePayrolls = payrolls.filter(
      p => p.employeeId === employeeId && p.status === 'processed'
    );
    
    return employeePayrolls.reduce(
      (acc, payroll) => {
        acc.grossTotal += payroll.totalGross;
        acc.netTotal += payroll.totalNet;
        acc.count += 1;
        return acc;
      },
      { grossTotal: 0, netTotal: 0, count: 0 }
    );
  };

  return (
    <HRPortalLayout activeTab="payroll">
      <div className="py-6 px-6">
        <h1 className="text-3xl font-bold mb-2 text-gray-900">Payroll Management</h1>
        <p className="text-gray-600 mb-8">Calculate and process employee payroll, including salaries, commissions, and deductions</p>

        {/* Tabs */}
        <div className="mb-6">
          <div className="border-b border-gray-200">
            <nav className="-mb-px flex space-x-8">
              <button
                className={`py-4 px-1 border-b-2 font-medium text-sm ${
                  activeTab === 'current'
                    ? 'border-primary text-primary'
                    : 'border-transparent text-gray-500 hover:text-gray-700 hover:border-gray-300'
                }`}
                onClick={() => setActiveTab('current')}
              >
                Current Pay Period
              </button>
              <button
                className={`py-4 px-1 border-b-2 font-medium text-sm ${
                  activeTab === 'history'
                    ? 'border-primary text-primary'
                    : 'border-transparent text-gray-500 hover:text-gray-700 hover:border-gray-300'
                }`}
                onClick={() => {
                  setActiveTab('history');
                  setSelectedPayroll(null);
                  setSelectedPayrollId(null);
                }}
              >
                Payroll History
              </button>
            </nav>
          </div>
        </div>

        {/* Current Pay Period Tab */}
        {activeTab === 'current' && (
          <div className="grid grid-cols-1 lg:grid-cols-2 gap-6">
            <PayrollCalculator 
              employees={employees} 
              payrollPeriod={currentPayPeriod}
              onCalculate={handleCalculatePayroll}
            />
            
            {selectedPayroll ? (
              <PayslipGenerator 
                payroll={selectedPayroll}
                employee={selectedEmployee}
                onProcess={handleProcessPayroll}
              />
            ) : (
              <div className="bg-white rounded-xl border border-gray-200 shadow-sm p-6 flex flex-col items-center justify-center h-full">
                <svg xmlns="http://www.w3.org/2000/svg" className="h-12 w-12 text-gray-300 mb-4" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                  <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={1.5} d="M9 17v-2m3 2v-4m3 4v-6m2 10H7a2 2 0 01-2-2V5a2 2 0 012-2h5.586a1 1 0 01.707.293l5.414 5.414a1 1 0 01.293.707V19a2 2 0 01-2 2z" />
                </svg>
                <h3 className="text-lg font-medium text-gray-600">No Payslip Generated Yet</h3>
                <p className="text-gray-500 mt-1 text-center">Select an employee and calculate their payroll to generate a payslip.</p>
              </div>
            )}
          </div>
        )}

        {/* Payroll History Tab */}
        {activeTab === 'history' && (
          <div className="grid grid-cols-1 lg:grid-cols-3 gap-6">
            {/* Top Summary Cards */}
            <div className="lg:col-span-3 grid grid-cols-1 md:grid-cols-3 gap-6 mb-2">
              {/* Total Processed */}
              <div className="bg-white rounded-xl border border-gray-200 p-6 shadow-sm">
                <div className="flex justify-between items-center mb-4">
                  <h3 className="text-sm font-medium text-gray-500">Processed Payrolls</h3>
                  <span className="bg-green-100 text-green-600 p-2 rounded-full">
                    <svg xmlns="http://www.w3.org/2000/svg" className="h-5 w-5" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                      <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M9 12l2 2 4-4m6 2a9 9 0 11-18 0 9 9 0 0118 0z" />
                    </svg>
                  </span>
                </div>
                <div className="flex items-baseline">
                  <span className="text-3xl font-bold text-gray-900">
                    {payrolls.filter(p => p.status === 'processed').length}
                  </span>
                </div>
                <div className="mt-2 text-sm text-gray-600">
                  Last processed: {payrolls.filter(p => p.status === 'processed').length > 0 
                    ? new Date(payrolls.filter(p => p.status === 'processed')[0].createdAt).toLocaleDateString() 
                    : 'None'}
                </div>
              </div>
              
              {/* Total Gross */}
              <div className="bg-white rounded-xl border border-gray-200 p-6 shadow-sm">
                <div className="flex justify-between items-center mb-4">
                  <h3 className="text-sm font-medium text-gray-500">Total Gross (Current Month)</h3>
                  <span className="bg-blue-100 text-blue-600 p-2 rounded-full">
                    <svg xmlns="http://www.w3.org/2000/svg" className="h-5 w-5" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                      <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M12 8c-1.657 0-3 .895-3 2s1.343 2 3 2 3 .895 3 2-1.343 2-3 2m0-8c1.11 0 2.08.402 2.599 1M12 8V7m0 1v8m0 0v1m0-1c-1.11 0-2.08-.402-2.599-1M21 12a9 9 0 11-18 0 9 9 0 0118 0z" />
                    </svg>
                  </span>
                </div>
                <div className="flex items-baseline">
                  <span className="text-3xl font-bold text-gray-900">
                    {new Intl.NumberFormat('en-US', {
                      style: 'currency',
                      currency: 'USD',
                      maximumFractionDigits: 0
                    }).format(payrolls.filter(p => p.status === 'processed').reduce((sum, p) => sum + p.totalGross, 0))}
                  </span>
                </div>
                <div className="mt-2 text-sm text-gray-600">
                  Across {payrolls.filter(p => p.status === 'processed').length} payrolls
                </div>
              </div>
              
              {/* Total Net */}
              <div className="bg-white rounded-xl border border-gray-200 p-6 shadow-sm">
                <div className="flex justify-between items-center mb-4">
                  <h3 className="text-sm font-medium text-gray-500">Total Net (Current Month)</h3>
                  <span className="bg-primary/10 text-primary p-2 rounded-full">
                    <svg xmlns="http://www.w3.org/2000/svg" className="h-5 w-5" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                      <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M17 9V7a2 2 0 00-2-2H5a2 2 0 00-2 2v6a2 2 0 002 2h2m2 4h10a2 2 0 002-2v-6a2 2 0 00-2-2H9a2 2 0 00-2 2v6a2 2 0 002 2z" />
                    </svg>
                  </span>
                </div>
                <div className="flex items-baseline">
                  <span className="text-3xl font-bold text-gray-900">
                    {new Intl.NumberFormat('en-US', {
                      style: 'currency',
                      currency: 'USD',
                      maximumFractionDigits: 0
                    }).format(payrolls.filter(p => p.status === 'processed').reduce((sum, p) => sum + p.totalNet, 0))}
                  </span>
                </div>
                <div className="mt-2 text-sm text-gray-600">
                  After taxes and deductions
                </div>
              </div>
            </div>

            {/* Payroll History List */}
            <div className="bg-white rounded-xl border border-gray-200 shadow-sm overflow-hidden">
              <div className="border-b border-gray-200 bg-gray-50 px-6 py-4">
                <h2 className="text-lg font-semibold text-gray-900">Payroll History</h2>
              </div>
              
              {isLoading ? (
                <div className="p-6 flex justify-center">
                  <div className="animate-spin rounded-full h-12 w-12 border-t-2 border-b-2 border-primary"></div>
                </div>
              ) : payrolls.length > 0 ? (
                <div className="overflow-y-auto max-h-[600px]">
                  <ul className="divide-y divide-gray-200">
                    {payrolls.map((payroll) => {
                      const employee = employees.find(e => e.id === payroll.employeeId);
                      const isSelected = selectedPayrollId === payroll.id;
                      
                      return (
                        <li 
                          key={payroll.id}
                          className={`p-4 hover:bg-gray-50 cursor-pointer ${isSelected ? 'bg-primary/5 border-l-4 border-primary' : ''}`}
                          onClick={() => handlePayrollHistoryClick(payroll.id)}
                        >
                          <div className="flex justify-between mb-1">
                            <span className="font-medium text-gray-900">
                              {employee ? `${employee.firstName} ${employee.lastName}` : 'Unknown Employee'}
                            </span>
                            <span 
                              className={`inline-flex items-center px-2.5 py-0.5 rounded-full text-xs font-medium ${
                                payroll.status === 'processed' 
                                  ? 'bg-green-100 text-green-800'
                                  : payroll.status === 'draft' 
                                  ? 'bg-yellow-100 text-yellow-800'
                                  : 'bg-red-100 text-red-800'
                              }`}
                            >
                              {payroll.status.charAt(0).toUpperCase() + payroll.status.slice(1)}
                            </span>
                          </div>
                          <div className="text-sm text-gray-600">
                            {new Date(payroll.periodStart).toLocaleDateString()} - {new Date(payroll.periodEnd).toLocaleDateString()}
                          </div>
                          <div className="mt-2 flex justify-between">
                            <span className="text-sm text-gray-500">
                              {new Date(payroll.createdAt).toLocaleDateString()}
                            </span>
                            <span className="text-sm font-medium">
                              {new Intl.NumberFormat('en-US', {
                                style: 'currency',
                                currency: 'USD'
                              }).format(payroll.totalNet)}
                            </span>
                          </div>
                        </li>
                      );
                    })}
                  </ul>
                </div>
              ) : (
                <div className="p-6 text-center">
                  <svg xmlns="http://www.w3.org/2000/svg" className="h-12 w-12 text-gray-300 mx-auto mb-4" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                    <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={1.5} d="M9 17v-2m3 2v-4m3 4v-6m2 10H7a2 2 0 01-2-2V5a2 2 0 012-2h5.586a1 1 0 01.707.293l5.414 5.414a1 1 0 01.293.707V19a2 2 0 01-2 2z" />
                  </svg>
                  <h3 className="text-lg font-medium text-gray-600">No Payroll History</h3>
                  <p className="text-gray-500 mt-1">No payroll records have been created yet.</p>
                </div>
              )}
            </div>
            
            {/* Selected Payroll Payslip */}
            <div className="lg:col-span-2">
              {selectedPayroll ? (
                <PayslipGenerator 
                  payroll={selectedPayroll}
                  employee={selectedEmployee}
                  onProcess={handleProcessPayroll}
                />
              ) : (
                <div className="bg-white rounded-xl border border-gray-200 shadow-sm p-6 flex flex-col items-center justify-center h-full">
                  <svg xmlns="http://www.w3.org/2000/svg" className="h-12 w-12 text-gray-300 mb-4" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                    <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={1.5} d="M9 12h6m-6 4h6m2 5H7a2 2 0 01-2-2V5a2 2 0 012-2h5.586a1 1 0 01.707.293l5.414 5.414a1 1 0 01.293.707V19a2 2 0 01-2 2z" />
                  </svg>
                  <h3 className="text-lg font-medium text-gray-600">No Payslip Selected</h3>
                  <p className="text-gray-500 mt-1 text-center">Select a payroll record from the history list to view its details.</p>
                </div>
              )}
            </div>
          </div>
        )}
      </div>
    </HRPortalLayout>
  );
};

export default PayrollPage;

// Sample data for demo purposes
const sampleEmployees: Partial<Employee>[] = [
  {
    id: '101',
    firstName: 'Sophie',
    lastName: 'Taylor',
    email: 'sophie.taylor@example.com',
    role: 'Senior Stylist',
    department: 'Hair',
    status: 'active'
  },
  {
    id: '102',
    firstName: 'Alex',
    lastName: 'Rodriguez',
    email: 'alex.rodriguez@example.com',
    role: 'Salon Manager',
    department: 'Management',
    status: 'active'
  },
  {
    id: '103',
    firstName: 'Emma',
    lastName: 'Johnson',
    email: 'emma.johnson@example.com',
    role: 'Junior Stylist',
    department: 'Hair',
    status: 'active'
  },
  {
    id: '104',
    firstName: 'David',
    lastName: 'Miller',
    email: 'david.miller@example.com',
    role: 'Barber',
    department: 'Hair',
    status: 'active'
  },
  {
    id: '105',
    firstName: 'Amanda',
    lastName: 'Chen',
    email: 'amanda.chen@example.com',
    role: 'Esthetician',
    department: 'Skin Care',
    status: 'on_leave'
  }
];

const samplePayrolls: Payroll[] = [
  {
    id: '1',
    employeeId: '101',
    periodStart: '2024-06-16',
    periodEnd: '2024-06-30',
    baseSalary: 1800,
    commissions: 952.50,
    tips: 427.50,
    deductions: {
      health: 85.75,
      retirement: 72.00,
      other: 0
    },
    taxes: {
      federal: 270.00,
      state: 90.00,
      socialSecurity: 170.64,
      medicare: 39.91
    },
    totalGross: 3180.00,
    totalNet: 2521.70,
    status: 'processed',
    createdAt: '2024-06-30T15:30:00Z',
    processedAt: '2024-06-30T16:45:00Z'
  },
  {
    id: '2',
    employeeId: '103',
    periodStart: '2024-06-16',
    periodEnd: '2024-06-30',
    baseSalary: 1200,
    commissions: 368.75,
    tips: 195.25,
    deductions: {
      health: 85.75,
      retirement: 48.00,
      other: 0
    },
    taxes: {
      federal: 180.00,
      state: 60.00,
      socialSecurity: 97.05,
      medicare: 22.70
    },
    totalGross: 1764.00,
    totalNet: 1270.50,
    status: 'processed',
    createdAt: '2024-06-30T14:22:00Z',
    processedAt: '2024-06-30T16:45:00Z'
  },
  {
    id: '3',
    employeeId: '104',
    periodStart: '2024-06-16',
    periodEnd: '2024-06-30',
    baseSalary: 1500,
    commissions: 556.25,
    tips: 325.50,
    deductions: {
      health: 85.75,
      retirement: 60.00,
      other: 0
    },
    taxes: {
      federal: 225.00,
      state: 75.00,
      socialSecurity: 127.48,
      medicare: 29.82
    },
    totalGross: 2381.75,
    totalNet: 1778.70,
    status: 'processed',
    createdAt: '2024-06-30T12:15:00Z',
    processedAt: '2024-06-30T16:45:00Z'
  },
  {
    id: '4',
    employeeId: '102',
    periodStart: '2024-06-16',
    periodEnd: '2024-06-30',
    baseSalary: 2500,
    commissions: 0,
    tips: 0,
    deductions: {
      health: 85.75,
      retirement: 100.00,
      other: 0
    },
    taxes: {
      federal: 375.00,
      state: 125.00,
      socialSecurity: 155.00,
      medicare: 36.25
    },
    totalGross: 2500.00,
    totalNet: 1623.00,
    status: 'processed',
    createdAt: '2024-06-30T11:05:00Z',
    processedAt: '2024-06-30T16:45:00Z'
  },
  {
    id: '5',
    employeeId: '101',
    periodStart: '2024-06-01',
    periodEnd: '2024-06-15',
    baseSalary: 1800,
    commissions: 875.25,
    tips: 412.50,
    deductions: {
      health: 85.75,
      retirement: 72.00,
      other: 0
    },
    taxes: {
      federal: 270.00,
      state: 90.00,
      socialSecurity: 166.06,
      medicare: 38.84
    },
    totalGross: 3087.75,
    totalNet: 2365.10,
    status: 'processed',
    createdAt: '2024-06-15T15:45:00Z',
    processedAt: '2024-06-15T17:15:00Z'
  }
]; 